#!/bin/bash

source $__CONFIG_DIR/net

_net_short_help() {
    echo "Network shortcuts"
}

_net() {
    echo "usage: $(basename $0) ${FUNCNAME[0]} subcommand"
    echo
    echo "available subcommands are:"
    echo "  proxy        - proxy with netcat"
    echo "  cert-chain   - get the cert chain for a TLS endpoint"
    echo "  wayback      - wayback machine search (opens a browser) (hermit!!)"
    echo "  serve        - serve a directory"
    echo "  show-ip      - show IP of specified interface"
    echo "  tcp          - send raw TCP"
    echo "  chrome-proxy - start chrome with proxy"
}

_net_proxy() {
    # TODO -v is not logging connection?
    if ! [ $# -eq 3 ]; then
        echo 'usage: net proxy LISTENING_PORT REMOTE PORT'
        exit 1
    fi
    listen_port=$1
    remote_host=$2
    remote_port=$3

    fifo=/tmp/_nc-proxy-fifo-$(head -c 12 /dev/urandom | xxd -p)
    _cleanup() { rm $fifo; }
    trap _cleanup EXIT

    mkfifo $fifo
    __info Made fifo $fifo
    __info Listening on $listen_port, proxying to $remote_host:$remote_port
    nc -vl $listen_port < $fifo | nc $remote_host $remote_port > $fifo
}

_net_cert-chain() {
    if [ $# -lt 1 ]; then
        echo 'usage: net cert-chain DOMAIN [PORT]'
        exit 1
    fi
    domain=$1
    port=${2:-443}
    openssl s_client -connect $domain:$port </dev/null 2>/dev/null
}

_net_wayback() {
    if [ $# -lt 1 ]; then
        echo 'usage: wayback SITE'
        exit 1
    fi
    prefix='http://web.archive.org/web/*/'
    query=$prefix$1
    __link_open $query
}

_net_serve() {
    if [ $# -lt 1 ]; then
        echo 'usage: serve [DIR [PORT]]'
        exit 1
    fi
    dir=${1:-.}
    port=${2:-8000}
    __info serving $dir on http://localhost:$port

    python3 -m http.server --directory $dir $port
}

__net_parse_ifconfig() {
    grep 'inet\b' | awk '{ print $2 }' | cut -d/ -f1
}

_net_show-ip() {
    if [ $# -ne 1 ]; then
        echo 'usage: show-ip IFNAME'
        exit 1
    fi

    if hash ifconfig 2>/dev/null; then
        ifconfig $1 | __net_parse_ifconfig
    elif hash ip 2>/dev/null; then
        ip addr show $1 | __net_parse_ifconfig
    else
        echo no ifconfig or ip, todo
    fi
}

_net_tcp() {
    ${__BASEDIR}/bin/tcputil $*
}


_net_chrome-proxy() {
    if [ $* -ne 1 ]; then
        echo usage: chrome-proxy PROXY_ADDR
        echo example: chrome-proxy localhost:8080
        exit 1
    elif [ -z "${CHROME_EXECUTABLE_PATH}" ]; then
        echo please set CHROME_EXECUTABLE_PATH in env or $__BASEDIR/config/net
        exit 1
    fi
    proxy_host=$1
    "${CHROME_EXECUTABLE_PATH}" \
        --args \
        --proxy-server="${proxy_host}" \
        --disable-web-security \
        --user-data-dir \
        --ignore-certificate-errors
}
