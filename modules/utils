#!/bin/bash
### this should merge with misc tbh

_utils_view-json() { ### pretty view json (jq -C into a pager)
    if [ $# -eq 1 ] && [ "$1" = "-h" ]; then
        echo 'usage: view-json FILE or view-json < file'
        exit 1
    fi
    if [ $# -eq 1 ]; then
        jq -C . < $1 | less -R
    else
        cat | jq -C . | less -R
    fi
}

_utils_calc() { ### do simple calculations with bc (calc '1/2*5.1')
    if ! [ $# -eq 1 ]; then
        echo 'example usage: calc "1/2*5"'
        exit 1
    fi
    __warn fyi this is only outputting 6 decimals
    echo "scale=6; $1" | bc -liq
}

_utils_print-unicode() { ### print a unicode character by codepoint
    if ! [ $# -eq 1 ]; then
        echo 'example usage: print-unicode 200B'
        exit 1
    fi
    _codepoint=$1
    __info depending on the codepoint, you may not see any output >&2
    python3 -c 'print("\u'${_codepoint}'", end=None)'
}

_utils_start-elasticsearch() {
    __info 'This is definitely one of the less necessary things in here'
    docker-compose -f ${__BASEDIR}/config/docker-compose-es.yml up
}

_utils_stop-elasticsearch() {
    __info 'This is definitely one of the less necessary things in here'
    docker-compose -f ${__BASEDIR}/config/docker-compose-es.yml down
}

_utils_graphiql() { ### run browsable graphiql
    __graphiql_usage() {
        echo 'usage: graphiql [start|stop] [options..]'
        exit 1
    }

    if [ $# -lt 1 ]; then
        __graphiql_usage
    fi

    cmd=$1; shift
    container_name=graphiql
    case $cmd in
        start|run)
            port=${1:-3000}
            echo starting graphiql workspace, container name \"${container_name}\"
            docker run --name ${container_name} --rm -dp ${port}:3000 htb:graphiql
            echo running on port ${port}
            ;;
        stop|kill)
            docker kill ${container_name}
            ;;
        *)
            __graphiql_usage
            ;;
    esac
}

_utils_date-iso() { ### ISO-8601 date (not all date bins have -I)
    date +%Y-%m-%dT%H:%M:%S%z
}

_utils_verify-gpg() { ### verify PGP signature for a file (lol..)
    gpg_cmd=$(__requires_one_of gpg gpg2)
    if ! [ $# -eq 2 ]; then
        echo 'usage: verify-gpg SIGNATURE_FILE KEY_FINGERPRINT'
        exit 1
    fi
    $gpg_cmd --recv-keys "$2"
    $gpg_cmd --verify "$1"
}
