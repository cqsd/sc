#!/bin/bash
### sparse but actually kinda useful ec2 shortcuts

__sc_ec2-lab-usage() { echo 'usage: lab {start|stop|ssh}'; }
_ec2_lab() { ### manage scratch instances for lab (todo)
    echo 'unfinished'
    exit 1
    cmd=$1; shift
    case $cmd in
        start)
            if [ -z "${SC_AWS_DEFAULT_AMI}" ]; then
                echo 'set SC_AWS_DEFAULT_AMI'
                exit 1
            fi
            ;;
        stop)
            ;;
        *)
            __sc_ec2_lab_usage
            exit 1
            ;;
    esac
}

_ec2_ls() { ### list running ec2 instances
    aws ec2 describe-instances \
        --query='Reservations[*].Instances[*]' \
        $* \
        | jq '[ .[] | .[] | { instanceProfileArn: .IamInstanceProfile.Arn, subnetId: .SubnetId, securityGroups: .SecurityGroups, instanceId: .InstanceId, privateDnsName: .PrivateDnsName, publicDnsName: .PublicDnsName } ]'
}

_ec2_list-running() {
    ec2_ls \
        --filter='Name=instance-state-name,Values=running' \
        $*
}

_ec2_rds() {
    echo "usage: $(basename $0) ${FUNCNAME[0]} SUBCMD"
    echo
    echo "available subcommands are:"
    echo "  ls - list running rds instances"
}

_ec2_rds-ls() {
    aws rds describe-db-instances $*
}

_ec2_ls-sg() { ### list security groups (name and id)
    aws ec2 describe-security-groups --query 'SecurityGroups[*].[GroupName,GroupId]'
}

_ec2_ssh() { ### ssh into running instance
    if [ $# -lt 1 ]; then
        echo 'usage: ssh <IP or domain> [user]'
        exit 1
    fi
    host=$1
    user=${2:-"ec2-user"}
    ssh -i ~/.ssh/ec2-default.pem $user@$host
}
