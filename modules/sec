#!/bin/bash

__link_open() {
    __info opening $1
    if [ "$(uname)" = "Darwin" ]; then
        open $1
    else
        __warn 'using python; this might cause a flash'
        python -m webbrowser $1
    fi
}

_sec_short_help() {
    echo "Security tool shortcuts"
}

_sec() {
    echo "usage: $(basename $0) ${FUNCNAME[0]} subcommand"
    echo
    echo "available subcommands are:"
    echo "  trufflehog   - run trufflehog (you can pass args)"
    echo "  grep-todo    - grep common todo strings in pwd"
    echo "  test-aws-key - grep common todo strings in pwd"
}

_sec_trufflehog() {
    if ! [ -f ~/.venvs/utils/bin/trufflehog ]; then
        __warn "Couldn't find ~/.venvs/utils/bin/trufflehog"
        __warn "Either set that up, or set SC_TRUFFLEHOG_PATH"
        exit 1
    fi
    TRUFFLEHOG=${SC_TRUFFLEHOG_PATH:-~/.venvs/utils/bin/trufflehog}
    ${TRUFFLEHOG} \
        --regex \
        --entropy false \
        --rules $(dirname ${BASH_SOURCE[0]})/../config/trufflehog-rules.json \
        $*
}

_sec_grep-todo() {
	fifo="/tmp/$(head -c4 /dev/urandom | xxd -p | xargs).fifo"
	mkfifo $fifo
	# dumb mkfifo tee hack (tee >(subcmd) syntax may not be available)
	echo -e "----\n$(wc -l < $fifo | xargs) todos found" &
	{
		if git status &>/dev/null; then
			git grep --color=always -ie '\btodo\b' -e '\bxxx\b' -e '\bfixme\b'
		else
			grep --color=always -ire '\btodo\b' -e '\bxxx\b' -e '\bfixme\b' .
		fi
	} | tee $fifo
	rm $fifo
}

_sec_test-aws-key() {
    read -p "Key ID (AKIA...): " _key_id
    read -sp "Secret (will be hidden): " _key_secret
    echo

    __info calling aws sts-get-caller-identity with $_key_id
    env -i \
        PATH=$(dirname $(which aws))
        AWS_ACCESS_KEY_ID=${_key_id} \
        AWS_SECRET_ACCESS_KEY=${_key_secret} \
        aws sts get-caller-identity
}
