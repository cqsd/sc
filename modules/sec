#!/bin/bash
### "security" shortcuts

SHARK_BASE_DIR=~/src/security/shark
__DORK_DIR=${__BASEDIR}/data/sec/dork
__DORK_FILE=${__DORK_DIR}/main

_sec_trufflehog() { ### run trufflehog (you can pass args)
    if ! [ -f ~/.venvs/utils/bin/trufflehog ]; then
        __warn "Couldn't find ~/.venvs/utils/bin/trufflehog"
        __warn "Either set that up, or set SC_TRUFFLEHOG_PATH"
        exit 1
    fi
    TRUFFLEHOG=${SC_TRUFFLEHOG_PATH:-~/.venvs/utils/bin/trufflehog}
    ${TRUFFLEHOG} \
        --regex \
        --entropy false \
        --rules $(dirname ${BASH_SOURCE[0]})/../config/trufflehog-rules.json \
        $*
}

_sec_grep-todo() { ### grep common todo strings in pwd
    # edit: what the FUCK is this for
    fifo="/tmp/$(head -c4 /dev/urandom | xxd -p | xargs).fifo"
    mkfifo $fifo
    # dumb mkfifo tee hack (tee >(subcmd) syntax may not be available)
    echo -e "----\n$(wc -l < $fifo | xargs) todos found" &
    {
        if git status &>/dev/null; then
            git grep --color=always -ie '\btodo\b' -e '\bxxx\b' -e '\bfixme\b'
        else
            grep --color=always -ire '\btodo\b' -e '\bxxx\b' -e '\bfixme\b' .
        fi
    } | tee $fifo
    rm $fifo
}

_sec_grep-todo-2() { ### grep common todo strings part 2
    patterns=(
        fixme
        fuck
        hack
        idk
        lmao
        lol
        rofl
        shit
        xxx
        secret
        api_key
        token
        "don'\?t"
    )
    regex_string=todo
    # eventual goal is to build something like this:
    # '\b\(todo\|xxx\|fixme\)\b'
    # we add the bars in the loop then just sub the thing inside the
    # parens when we invoke grep
    for pattern in ${patterns[@]}; do
        regex_string="$regex_string\|$pattern"
    done
    grep --color=always -in "\b\($regex_string\)\b" $@
}

_sec_test-aws-key() { ### grep common todo strings in pwd
    read -p "Key ID (AKIA...): " _key_id
    read -sp "Secret (will be hidden): " _key_secret
    echo

    __info calling aws sts-get-caller-identity with $_key_id
    env -i \
        PATH=$(dirname $(which aws))
        AWS_ACCESS_KEY_ID=${_key_id} \
        AWS_SECRET_ACCESS_KEY=${_key_secret} \
        aws sts get-caller-identity
}

_sec_payload() { ### cat a payload (no args to list available)
    _basedir=$(dirname ${BASH_SOURCE[0]})/../data/sec
    _usage() { echo "usage: payload TYPE NAME"; }
    _category=$1
    _subcategory=$2
    _name=$3
    if [ -z "$_category" ]; then
        echo available categories
        ls $_basedir | sed 's/^/  /g'
        exit 0
    elif [ -z "$_subcategory" ]; then
        echo available $_category types
        ls $_basedir/$_category | sed 's/^/  /g'
        exit 0
    elif [ -z "$_name" ]; then
        echo available $_category/$_subcategory payloads
        ls $_basedir/$_category/$_subcategory | sed 's/^/  /g'
        exit 0
    elif [ $# -gt 3 ]; then
        _usage
    else
        grep -o "^#.*$" $_basedir/$_category/$_subcategory/$_name >&2
        grep -v "^#.*$" $_basedir/$_category/$_subcategory/$_name
    fi
}

_sec_check-fish-read() { ### check if fish has saved any secrets typed into read -s
    __info "This is hardcoded for the default path" >&2
    __info "You should make it check for alternate configuration" >&2
    cat ~/.local/share/fish/fish_read_history
}

_sec_shark() { ### run some shit against a target
    if [ $# -lt 1 ]; then
        echo 'usage: shark target [n_top_ports_to_nmap(25)]'
        exit 1
    fi
    target=$1
    outdir=${2:-$SHARK_BASE_DIR}
    outfile_base=$outdir/$target
    echo $@

    __info will output under $outdir, enter to continue
    read

    mkdir -p $outdir

    dig $target | tee ${outfile_base}-dig
    # whois $target | tee -a ${outfile_base}-whois
    # -o doesn't work (in fact, new amass update... doesn't seem to do anything)
    amass enum -d $target | tee ${outfile_base}-amass
}

_sec_nmap() { ### nmap some shit
    if [ $# -lt 1 ]; then
        echo 'usage: nmap target [n_top_ports_to_nmap(25)] [speed(3)]'
        exit 1
    fi
    target=$1
    n_top_ports=${2:-25}
    speed=${3:-3}
    nmap -vvv -T${speed} -Pn --top-ports=$n_top_ports $target
}

_sec_scrape() { ### start local bookmark scraper listener
    _usage() {
        echo 'usage: scrape [start|get] [options..]'
        echo
        echo Listen on localhost for data from bookmarklet-based scrapers
        echo
        echo subcommands:
        echo '    start (run) [port]'
        echo '    get kind [port]'

        exit 1
    }

    if [ $# -lt 1 ]; then
        _usage
    fi

    cmd=$1; shift
    case $cmd in
        start|run)
            port=${1:-9753}
            echo starting scraper on port $port
            ${__BASEDIR}/bin/scrape-listener -p $port run
            ;;
        get)
            kind=${1:_}
            port=${2:-9753}
            curl -sL localhost:$port/_/$kind
            ;;
        *)
            _usage
            ;;
    esac
}

_sec_dork() { ### osint dorks, idk atm
    _usage() {
        echo usage: dork subcommand args
        echo
        echo subcommands:
        echo "    edit                   - edit the dork templates file"
        echo '    list [TYPE]            - show available templates [for given type]'
        echo '    template [TYPE] TARGET - if type not provided, templates all dorks'
        exit 1
    }

    _template() {
        target=$1
        sed -e "s/{{target}}/${1}/g"
    }

    if [ $# -lt 1 ]; then
        _usage
    fi

    cmd=$1; shift
    case $cmd in
        edit)
            $__EDITOR $__DORK_FILE
            ;;
        list)
            if [ $# -eq 1 ]; then
                _type=$1
                grep -hie "^$_type" $__DORK_FILE | cut -d\| -f2-
            else
                cut -d'|' -f1 $__DORK_FILE | sort | uniq
            fi
            ;;
        template)
            # find dorks of the given type
            # replace {{target}} with the target
            if [ $# -eq 1 ]; then
                target=$1
                cut -d\| -f2- $__DORK_FILE | _template $target
            else
                _type=$1
                target=$2
                grep -ih $_type $__DORK_FILE \
                    | cut -d\| -f2- \
                    | _template $target
            fi
            ;;
        *)
            _usage
            ;;
    esac
}
