#!/bin/bash

SHARK_BASE_DIR=~/src/security/shark

__link_open() {
    __info opening $1
    if [ "$(uname)" = "Darwin" ]; then
        open $1
    else
        __warn 'using python; this might cause a flash'
        sleep 1
        python -m webbrowser $1
    fi
}

_sec_short_help() {
    echo "Security tool shortcuts"
}

_sec() {
    echo "usage: $(basename $0) ${FUNCNAME[0]} subcommand"
    echo
    echo "available subcommands are:"
    echo "  trufflehog      - run trufflehog (you can pass args)"
    echo "  grep-todo       - grep common todo strings in pwd"
    echo "  test-aws-key    - grep common todo strings in pwd"
    echo "  check-fish-read - check if fish has saved any secrets typed into read -s"
    echo "  shark           - run some shit against a target"
    echo "  nmap            - nmap some shit"
}

_sec_trufflehog() {
    if ! [ -f ~/.venvs/utils/bin/trufflehog ]; then
        __warn "Couldn't find ~/.venvs/utils/bin/trufflehog"
        __warn "Either set that up, or set SC_TRUFFLEHOG_PATH"
        exit 1
    fi
    TRUFFLEHOG=${SC_TRUFFLEHOG_PATH:-~/.venvs/utils/bin/trufflehog}
    ${TRUFFLEHOG} \
        --regex \
        --entropy false \
        --rules $(dirname ${BASH_SOURCE[0]})/../config/trufflehog-rules.json \
        $*
}

_sec_grep-todo() {
	fifo="/tmp/$(head -c4 /dev/urandom | xxd -p | xargs).fifo"
	mkfifo $fifo
	# dumb mkfifo tee hack (tee >(subcmd) syntax may not be available)
	echo -e "----\n$(wc -l < $fifo | xargs) todos found" &
	{
		if git status &>/dev/null; then
			git grep --color=always -ie '\btodo\b' -e '\bxxx\b' -e '\bfixme\b'
		else
			grep --color=always -ire '\btodo\b' -e '\bxxx\b' -e '\bfixme\b' .
		fi
	} | tee $fifo
	rm $fifo
}

_sec_test-aws-key() {
    read -p "Key ID (AKIA...): " _key_id
    read -sp "Secret (will be hidden): " _key_secret
    echo

    __info calling aws sts-get-caller-identity with $_key_id
    env -i \
        PATH=$(dirname $(which aws))
        AWS_ACCESS_KEY_ID=${_key_id} \
        AWS_SECRET_ACCESS_KEY=${_key_secret} \
        aws sts get-caller-identity
}

_sec_inject-handlebars() {
    {
        __info 'this is copied straight from here:'
        __info 'https://mahmoudsec.blogspot.com/2019/04/handlebars-template-injection-and-rce.html'
        __info 'in fact this is only getting pushed because gh is the easiest way to transfer this'
        __info 'payload for tomorrow...'
    } >&2
    cat $(dirname ${BASH_SOURCE[0]})/../data/handlerbars-injection-base
}

_sec_check-fish-read() {
    __info "This is hardcoded for the default path" >&2
    __info "You should make it check for alternate configuration" >&2
    cat ~/.local/share/fish/fish_read_history
}

_sec_shark() {
    if [ $# -lt 1 ]; then
        echo 'usage: shark target [n_top_ports_to_nmap(25)]'
        exit 1
    fi
    target=$1
    outdir=${2:-$SHARK_BASE_DIR}
    outfile_base=$outdir/$target
    echo $@

    __info will output under $outdir, enter to continue
    read

    mkdir -p $outdir

    dig $target | tee ${outfile_base}-dig
    # whois $target | tee -a ${outfile_base}-whois
    # -o doesn't work (in fact, new amass update... doesn't seem to do anything)
    amass enum -d $target | tee ${outfile_base}-amass
}

_sec_nmap() {
    if [ $# -lt 1 ]; then
        echo 'usage: nmap target [n_top_ports_to_nmap(25)] [speed(3)]'
        exit 1
    fi
    target=$1
    n_top_ports=${2:-25}
    speed=${3:-3}
    nmap -vvv -T${speed} -Pn --top-ports=$n_top_ports $target
}
