#!/bin/bash

_misc_short_help() {
    echo "Meta things (uncategorized)"
}

_misc() {
    echo "usage: $(basename $0) ${FUNCNAME[0]} subcommand"
    echo
    echo "available subcommands are:"
    echo "  show-pass       - show item in local keychain (OS X only)"
    echo '  xargs-edit (xe) - cut -d: -f1 | sort | uniq | xargs ${EDITOR:-vi}'
    echo "  test-loggers    - test output of logging functions"
    echo "  graphiql        - run browsable graphiql"
}

_misc_show-pass() {
    if [ $# -lt 1 ]; then
        echo 'usage: show-pass name'
        exit 1
    fi
    name=$1; shift
    security find-generic-password -s "$name" -w $*
}

_misc_xargs-edit() {
    cut -d: -f1 | sort | uniq | xargs ${EDITOR:-vi}
}

_misc_xe() {
    _misc_xargs-edit
}

_misc_package-lock-info-all() {
    if [ $# -lt 3 ]; then
        echo "usage: package-lock-info-all PACKAGE_LOCK_FILE SLEEP_TIME OUTFILE"
        exit 1
    fi
    if ! command -v npm &>/dev/null; then
        echo "no npm found, install or set in path"
        exit 1
    fi
    package_lock_file=$1
    sleep_time=$2
    outfile=$3
    for package in $(jq -r '.dependencies | keys[]' $package_lock_file); do
        echo $package
        npm view $package . | tee -a $outfile
        sleep $sleep_time
    done
}

_misc_count-size-of-node-modules() {
    cd node_modules
    for d in ./*; do
        if [[ $d =~ .*@.* ]]; then
            for d2 in $d/*; do
                echo $d2:$(cloc $d2 --json | jq .SUM.code)
            done
        else
            echo $d:$(cloc $d --json | jq .SUM.code)
        fi
    done
    cd -
}

_misc_deprecate-npm-modules() {
    __error not implemented
    exit 1
}

_misc_test-loggers() {
    __success ${1:-"test success ||||||||||||||||"}
    __info    ${1:-"test info    ||||||||||||||||"}
    __warn    ${1:-"test warn    ||||||||||||||||"}
    __error   ${1:-"test error   ||||||||||||||||"}
}

_misc_graphiql() {
    __graphiql_usage() {
        echo 'usage: graphiql [start|stop] [options..]'
        exit 1
    }

    if [ $# -lt 1 ]; then
        __graphiql_usage
    fi

    cmd=$1; shift
    container_name=graphiql
    case $cmd in
        start|run)
            port=${1:-3000}
            echo starting graphiql workspace, container name \"${container_name}\"
            docker run --name ${container_name} --rm -dp ${port}:3000 htb:graphiql
            echo running on port ${port}
            ;;
        stop|kill)
            docker kill ${container_name}
            ;;
        *)
            __graphiql_usage
            ;;
    esac
}
