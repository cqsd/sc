#!/bin/bash
### Uncategorized

__sc_link_open() {
    __sc_info opening $1
    if [ "$(uname)" = "Darwin" ]; then
        open "$1"
    else
        __sc_warn 'using python; this might cause a flash'
        sleep 1
        python -m webbrowser "$1"
    fi
}

_misc_show-pass() { ### show item in local keychain (OS X only)
    if [ $# -lt 1 ]; then
        echo 'usage: show-pass name'
        exit 1
    fi
    name=$1; shift
    security find-generic-password -s "$name" -w $*
}

_misc_xargs-edit() { ### cut -d: -f1 | sort | uniq | xargs \${EDITOR:-vi}
    cut -d: -f1 | sort | uniq | xargs ${EDITOR:-vi}
}

_misc_xe() {
    _misc_xargs-edit
}

_misc_wayback() { ### wayback machine search/save
    __sc_wayback_usage() {
        echo 'usage: wayback [save|search] URL'
        exit 1
    }

    if [ $# -lt 1 ]; then
        __sc_wayback_usage
    fi

    __sc_wayback_save() {
        if [ $# -lt 1 ]; then
            exit 1
            echo 'usage: save URL'
        fi
        url=$1
        resp=$(curl -sI "https://web.archive.org/save/${url}" \
          -H 'accept: application/json' \
          | grep '^content-location:' \
          | cut -d' ' -f2 \
          | xargs)
        echo https://web.archive.org/save/${resp}
    }

    __sc_wayback_search() {
        if [ $# -lt 1 ]; then
            echo 'usage: wayback URL'
            exit 1
        fi
        prefix='http://web.archive.org/web/*/'
        query=$prefix$1
        __sc_link_open $query
    }

    cmd=$1; shift
    case $cmd in
        save)
            __sc_wayback_save "$@"
            ;;
        search)
            __sc_wayback_search "$@"
            ;;
        *)
            __sc_wayback_usage
            ;;
    esac
}

_misc_normie-check() { ### find people who put their employer in their twitter bio
    if [ $# -lt 1 ]; then
        echo 'usage: normie-check COMPANY_NAME'
        exit 1
    fi
    name=$1
    base="https://www.google.com/search?q="
    query="site:twitter.com -inurl:status -inurl:statuses+-inurl:${name} \"@${name}\""
    full="$base$query"
    __sc_link_open "$full"
}

_misc_package-lock-info-all() {
    if [ $# -lt 3 ]; then
        echo "usage: package-lock-info-all PACKAGE_LOCK_FILE SLEEP_TIME OUTFILE"
        exit 1
    fi
    if ! command -v npm &>/dev/null; then
        echo "no npm found, install or set in path"
        exit 1
    fi
    package_lock_file=$1
    sleep_time=$2
    outfile=$3
    for package in $(jq -r '.dependencies | keys[]' $package_lock_file); do
        echo $package
        npm view $package . | tee -a $outfile
        sleep $sleep_time
    done
}

_misc_count-size-of-node-modules() {
    cd node_modules
    for d in ./*; do
        if [[ $d =~ .*@.* ]]; then
            for d2 in $d/*; do
                echo $d2:$(cloc $d2 --json | jq .SUM.code)
            done
        else
            echo $d:$(cloc $d --json | jq .SUM.code)
        fi
    done
    cd -
}

_misc_deprecate-npm-modules() {
    __sc_error not implemented
    exit 1
}
