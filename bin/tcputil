#!/usr/bin/env python3
# don't use this unless you can figure out what's wrong with it
import os
import socket
import ssl
import subprocess
import tempfile


def edit_contents(fname=None):
    # if fname given, edit the file
    # otherwise, make a tempfile and edit that instead
    # spawn an editor to edit the file
    # when done, return the contents of the file?
    try:
        editor = os.environ['EDITOR']
    except KeyError:
        raise Exception('Please set the EDITOR environment variable')

    if not fname:
        f = tempfile.NamedTemporaryFile(suffix='.tmp')
        fname = f.name
        f.close()

    subprocess.call([editor, fname])

    try:
        with open(fname, 'rb') as f:
            return f.read()
    except FileNotFoundError:
        print('File not found or empty file')
        return ''


def replace_lf_with_crlf(bstring):
    return bstring.replace(b'\n', b'\r\n')


def read_socket(sock, bufsize=1024):
    data = b''
    while 1:
        chunk = sock.recv(bufsize)
        if not chunk:
            break
        data += chunk

    return data


def send_request(host, port, data, use_ssl=True, verify_ssl=False):
    '''yes, yes, I know'''
    with socket.create_connection((host, port)) as sock:
        if use_ssl:
            ctx = ssl.create_default_context()
            with ctx.wrap_socket(sock, server_hostname=host) as ssock:
                ssock.send(data)
                return ssock.read()
        else:
            sock.send(data)
            return read_socket(sock)


if __name__ == '__main__':
    import argparse
    import sys

    print('TODO: save a history of all the requests that have been sent')
    print('Use the hostname and port to index?')

    parser = argparse.ArgumentParser('tcputil', description='shit nc with editor')

    parser.add_argument('host', type=str)
    parser.add_argument('port', type=int)
    parser.add_argument('file', type=str, default='', nargs='?')
    parser.add_argument('-k', '--no-verify-ssl', action='store_true')
    parser.add_argument('-c', '--convert-to-crlf', action='store_true')
    parser.add_argument('-m', '--interpret-escapes', action='store_true')
    parser.add_argument('--ssl', help='use ssl', action='store_true')
    parser.add_argument('--no-archive', help='don\'t save the request in history', action='store_true')

    args = parser.parse_args()

    if args.file == '-':
        data = sys.stdin.buffer.read()
    else:
        data = edit_contents(args.file)

    if not data:
        print('No data to send, aborting')
        sys.exit(1)

    if args.convert_to_crlf:
        data = replace_lf_with_crlf(data)
    if args.interpret_escapes:
        data = data.decode('unicode_escape')

    resp = send_request(
        args.host,
        args.port,
        data,
        use_ssl=args.ssl,
        verify_ssl=not args.no_verify_ssl
    )

    sys.stdout.buffer.write(resp)
