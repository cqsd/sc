#!/bin/bash
set -eo pipefail

__sc_success() { echo -e "\033[32m[+] $@\033[0m"; }  # [+] green
__sc_info()    { echo -e "\033[34m[+] $@\033[0m"; }  # [+] blue
__sc_warn()    { echo -e "\033[33m[-] $@\033[0m"; }  # [-] yellow
__sc_error()   { echo -e "\033[31m[!] $@\033[0m"; }  # [!] red

__sc_quote_string() { printf "%q\n" "$1"; }

__sc_requires() {
    for cmd in "$@"; do
        if ! command -v $cmd &>/dev/null; then
            echo "this command requires $cmd. please install $cmd"
            exit 1
        fi
    done
}

__sc_requires_one_of() {
    for cmd in "$@"; do
        command -v $cmd &>/dev/null && echo $cmd && return
    done
    echo "this command requires one of $@" >&2
    exit 1
}

__sc_link_open() {
    __sc_info opening $1
    if [ "$(uname)" = "Darwin" ]; then
        open "$1"
    else
        __sc_warn 'using python; this might cause a flash'
        sleep 1
        python -m webbrowser "$1"
    fi
}

__sc_BASEDIR=$(dirname "$(readlink "$0")")
__sc_MODULES_DIR=$__sc_BASEDIR/modules
__sc_CONFIG_DIR=$__sc_BASEDIR/config
__sc_BIN_DIR=$__sc_BASEDIR/bin
__sc_DATA_DIR=$__sc_BASEDIR/data
__sc_EDITOR=${EDITOR:-vi}
# skip anything that has a _ at the start of its filename (these are "ignored")
__sc_MODULES=($(ls -1 ${__sc_BASEDIR}/modules | grep -v '^_'))

# return the length of the longest arg
__sc_max_length() {
    MAX_LENGTH=-1
    for s in $@; do
        # ${#var} => str length of ${var}
        if [ ${#s} -gt $MAX_LENGTH ]; then
            MAX_LENGTH=${#s}
        fi
    done
    echo ${MAX_LENGTH}
}

__sc_print_helptext() {
    left_pad_length=$1
    name=$2
    helptext=$3
    printf "  %-${left_pad_length}s - %s\n" $name "${helptext:-no help found}"
}

# grep for top level docstring in a module
__sc_module_docstring() {
    module=$1
    description_file="$__sc_BASEDIR/modules/$module/_description"
    test -f "$description_file" && cat "$description_file"
}

__sc_command_names() {
    module=$1
    ls -1 "${__sc_BASEDIR}/modules/$module" | grep -v '^_'
}

# ngl this is pretty fuckin bad
__sc_command_docstring() {
    module=$1
    command_name=$2
    {
        grep '^###' "${__sc_BASEDIR}/modules/$module/$command_name" \
            | sed 's/^### *//g' \
            | tr -d '\n'
    } || true
}

# print function docstrings in a module. this relies on you (me) always
# defining functions a certain way. there's already a lot of that in this
# project, so I'll tolerate it, but it's obviously not great...
__sc_module_function_usage() {
    module=$1
    echo "usage: $module [command]"
    echo
    echo "available commands are:"
    command_names=($(__sc_command_names $module))
    left_pad_length=$(__sc_max_length ${command_names[@]})
    IFS=$'\n'
    for command_name in ${command_names[@]}; do
        docstring=$(__sc_command_docstring $module $command_name)
        __sc_print_helptext $left_pad_length "$command_name" "$docstring"
    done
    unset IFS
}

__sc_usage() {
    echo "usage: $(basename $0) <module> [command]"
    echo
    echo "available modules are:"
    left_pad_length=$(__sc_max_length ${__sc_MODULES[@]})
    for module in ${__sc_MODULES[@]}; do
        __sc_print_helptext $left_pad_length $module "$(__sc_module_docstring $module)"
    done
    echo
    echo 'search for commands: meta search <term>'
}

__sc_handle_cmd() {
    module=$1; shift || true  # shift errors if no args left
    case $module in
        ''|h|-h|help|--help)
            __sc_usage
            ;;
        *)
            module_path="$__sc_BASEDIR/modules/$module"
            if [ -d "$module_path" ]; then
                # print module usage if there's no command
                if [ $# -eq 0 ]; then
                    __sc_module_function_usage $module
                    exit
                fi
                cmd=$1; shift
                script="$module_path/$cmd"
                if [ -f "$script" ]; then
                    if [ -f "$module_path/_common" ]; then
                        source "$module_path/_common"
                    fi
                    source "$script" "$@"
                else
                    __sc_error $module $cmd not found
                    exit 1
                fi
            else
                __sc_error $module not found
                exit 1
            fi
            ;;
    esac
}

__sc_handle_cmd "$@"
